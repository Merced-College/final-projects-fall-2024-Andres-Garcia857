/**
 * AdvancedWordle.java
 * @author Andres Garcia
 * @since 11/14/2024
 * This class simulates a terminal-based game of wordle while
 * adding a difficulty based on varying lengths and allowing replays
 * so long as you have guesses remaining.
*/

import java.io.*;
import java.util.*;

public class AdvancedWordle {
    public static ArrayList<Word> easyWords = new ArrayList<Word>(); // List of 4-lettered words
    public static ArrayList<Word> normalWords = new ArrayList<Word>(); // List of 5-lettered words
    public static ArrayList<Word> hardWords = new ArrayList<Word>(); // List of 6-lettered words
    public static ArrayList<Word> veryHardWords = new ArrayList<Word>(); // List of 7-lettered words
    public static Random random = new Random();

    public static void main(String[] args) {
        Scanner scnr = new Scanner(System.in);
        
        /**
         * Reads in words of WordList.txt, adding them to appropriate list
         * Partially generated by ChatGPT
        */
        String filePath = "WordList.txt";
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            // Reads through every word in file
            while ((line = br.readLine()) != null) {
                Word word = new Word(line); // Creates a Word object for each word
                // If current word has 4, 5, 6, or 7 letters
                if (word.getLength() == 4){
                    easyWords.add(word); // Add 4-letter words for easy difficulty
                }else if (word.getLength() == 5) {
                    normalWords.add(word); // Add 5-letter words for normal difficulty
                } else if (word.getLength() == 6) {
                    hardWords.add(word); // Add 6-letter words for hard difficulty
                } else if (word.getLength() == 7) {
                    veryHardWords.add(word); // Add 7-letter words for very hard difficulty
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }

        int totalGuesses = 6; // Total amount of guesses left
        int currGuess; // Current guess
        Word word; // Holds word for user to guess
        String input; // Reads in user input
        System.out.println("\nWelcome to Advanced Wordle! Remember to type /STOP at any point to end the game\nEASY - 4 letters, NORMAL - 5 letters, HARD - 6 letters, or VERY HARD - 7 letters");

        // Start of game, ends when user runs out of guesses
        while (true){
            // Begins current guess
            currGuess = 1;

            System.out.print("Choose difficulty: ");
            input = scnr.nextLine().toUpperCase(); // User decides difficulty

            // If user entered /STOP, end the game
            if (input.equals("/STOP")) {
                System.out.println("Thanks for playing!");
                break;
            }
            
            // If user entered a difficulty
            if (input.equals("EASY")){
                word = new Word(getRandomWord(easyWords)); // Get random word for easy difficulty
            } else if (input.equals("NORMAL")) {
                word = new Word(getRandomWord(normalWords)); // Get random word for normal difficulty
            } else if(input.equals("HARD")) {
                word = new Word(getRandomWord(hardWords)); // Get random word for hard difficulty
            } else if(input.equals("VERY HARD")) {
                word = new Word(getRandomWord(veryHardWords)); // Get random word for very hard difficulty
            } else {
                // Otherwise, ask user to enter difficulty again
                System.out.println("Incorrect input. Type EASY, NORMAL, HARD, or VERY HARD");
                continue;
            }

            // Print out initial length of word
            for (int i = 0; i < word.getLength(); i++){
                System.out.print("- ");
            }
            System.out.println();
            
            // While user has guesses remaining
            while(currGuess <= totalGuesses){
                System.out.print("Guess " + currGuess + " of " + totalGuesses + ": ");
                input = scnr.nextLine().toUpperCase(); // User makes a guess

                // If user enters /STOP, break out of this loop
                if (input.equals("/STOP")) {
                    break;
                }

                // Make arrays for comparison
                char[] inputArray = input.toCharArray();
                char[] wordArray = word.getText().toCharArray();

                // If user's guess is correct, user wins
                if (input.equals(word.getText())) {
                    System.out.println("You win! With " + (totalGuesses - currGuess) + " attempts left, the answer was: " + word.getText());
                    break;
                } else if (input.length() == word.getLength()) {
                    // Else if user's guess is same length as word
                    for (char ch : inputArray) {
                        System.out.print(ch + " "); // Print out user's guess
                    }
                    System.out.println("");
                    
                    // Print out every correct, misplaced, or incorrect letter
                    for (int i = 0; i < word.getLength(); i++){
                        // If correct letter and correct position, print out letter
                        if (inputArray[i] == wordArray[i]) {
                            System.out.print(wordArray[i] + " ");
                        } else if (word.getText().contains(Character.toString(inputArray[i]))){
                            // Else if correct letter but incorrect position, print out /
                            System.out.print("/ ");
                        } else {
                            // Otherwise, print out -
                            System.out.print("- ");
                        }
                    }
                    System.out.println("");

                    currGuess++; // Start next guess
                } else {
                    // Otherwise, ask user enter guess with correct number of letters
                    System.out.println("Please enter " + word.getLength() + " letters");
                }
            }

            // If user entered /STOP in prior inner loop, end the game
            if (input.equals("/STOP")) {
                System.out.println("Thanks for playing!");
                break;
            }

            // If user has guesses remaining, continue the game with remaining guesses plus 6 more
            if (totalGuesses - currGuess >= 0) {
                totalGuesses = totalGuesses - currGuess + 6;
                System.out.println("Adding 6 more guesses, you now have " + totalGuesses + " attempts to continue!");
                continue;
            } else {
                // Otherwise, user loses
                System.out.println("Game over! The answer was: " + word.getText());
            }

            // If user lost, user decides whether to restart or end game
            while (!input.equals("YES") || !input.equals("NO")) {
                System.out.print("Play again? (YES or NO): ");
                input = scnr.nextLine().toUpperCase();

                // If user entered YES, game restarts
                if (input.equals("YES")) {
                    System.out.println("Restarting game....");
                    break;
                } else if (input.equals("NO")) {
                    // Else if user entered NO, break out of while loop
                    System.out.println("Thanks for playing!");
                    break ;
                }
            }
            // If input entered NO in prior while loop, game ends
            if (input.equals("NO")) {
                break;
            }
        }

        scnr.close();
        
    }// end main

    /**
     * Method to grab a random word from a list
     * Preconditions: ArrayList of Word objects must exist
     * Postconditions: A random word from a given ArrayList is returned
     * @param list The ArrayList to pull a random word from
    */
    public static String getRandomWord(ArrayList<Word> list) {
        int randomIndex = random.nextInt(list.size() - 1); // Generate a random index for the list
        return list.get(randomIndex).getText(); // Return the randomized word
    }
}